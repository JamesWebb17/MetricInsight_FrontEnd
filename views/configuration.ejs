<!DOCTYPE html>
<html lang="en">
<head>

    <link rel="icon" href="/images/Logo_MetricInsight.ico" type="image/x-icon">
    <link rel="shortcut icon" href="/images/Logo_MetricInsight.ico" type="image/x-icon">

    <!-- Include the head -->
    <div id="head-placeholder"></div>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="preload" href="/stylesheets/style.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <link rel="preload" href="/stylesheets/checkBox.css" as="style" onload="this.onload=null;this.rel='stylesheet'">

    <script src="/javascripts/app-client.js"></script>

    <title>Configuration</title>

    <link>

</head>
<body class="container">
    <!-- Include the header -->
    <div id="header-placeholder"></div>

    <div class="row">

        <div class="col-md-6">

            <div class="container mt-4">
                <div class="jumbotron">
                    <h3 class="display-6 text-center">Monitoring configuration</h3>
                    <hr class="my-4">
                </div>
            </div>

            <!-- Form to send data to server -->
            <form id="MonitoringForm" action="/configuration/save_monitoring_configuration" class="mt-4" method="post">
                <p id="submitErrorMessage" style="display: none;"> Une erreur est survenue lors de la sauvegarde </p>
                <div class="form-group">
                    <h4>PID option :</h4>
                    <div class="form-check">
                        <input type="checkbox" id="pidCheckbox" name="pidCheckbox" class="form-check-input" {% if my_config.pid %}checked{% endif %}>
                        <label for="pidCheckbox" class="form-check-label">Would you like to focus on a specific process?</label>
                    </div>
                    <div id="pid-additional-case" {% if not my_config.pid %}style="display: none;"{% endif %} class="mt-2">
                        <div class="form-group">
                            <label for="pidInput">Target PID number :</label>
                            <input type="text" name="pidInput" id="pidInput" class="form-control" placeholder="0" {% if my_config.pid %}value="{{ my_config.pid_value }}"{% endif %}>
                        </div>
                    </div>
                </div>



                <div class="form-group">
                    <h4>Monitoring options (at least one is mandatory) :</h4>
                    <div class="form-check">
                        <input type="checkbox" id="cpuCheckbox" name="cpuCheckbox" class="form-check-input" {% if my_config.cpu %}checked{% endif %}>
                        <label for="cpuCheckbox" class="form-check-label">Observation of CPU</label>
                    </div>
                    <div class="form-check">
                        <input type="checkbox" id="gpuCheckbox" name="gpuCheckbox" class="form-check-input" {% if my_config.gpu %}checked{% endif %}>
                        <label for="gpuCheckbox" class="form-check-label">Observation of the GPU</label>
                    </div>
                    <div class="form-check">
                        <input type="checkbox" id="memoryCheckbox" name="memoryCheckbox" class="form-check-input" {% if my_config.memory %}checked{% endif %}>
                        <label for="memoryCheckbox" class="form-check-label">Observation of the memory</label>
                    </div>
                    <div class="form-check">
                        <input type="checkbox" id="powerCheckbox" name="powerCheckbox" class="form-check-input" {% if my_config.power %}checked{% endif %}>
                        <label for="powerCheckbox" class="form-check-label">Observation of the power</label>
                    </div>
                </div>

                <div class="form-group">
                    <h4>Advanced options :</h4>
                    <div class="form-check">
                        <input type="checkbox" id="freqCheckbox" name="freqCheckbox" class="form-check-input" {% if my_config.frequency_enabled %}checked{% endif %}>
                        <label for="freqCheckbox" class="form-check-label">Change sampling frequency value </label>
                    </div>
                    <div id="freq-additional-case" {% if not my_config.frequency_enabled %}style="display: none;"{% endif %} class="mt-2">
                        <div class="form-group">
                            <label for="FreqInput">New value sampling frequency :</label>
                            <input type="text" name="FreqInput" id="FreqInput"class="form-control" placeholder="10" {% if my_config.frequency_enabled %}value="{{ my_config.frequency_value }}"{% endif %}>
                        </div>
                    </div>
                    <div class="form-check">
                        <input type="checkbox" id="intervalCheckbox" name="intervalCheckbox" class="form-check-input" {% if my_config.interval_enabled %}checked{% endif %}>
                        <label for="intervalCheckbox" class="form-check-label">Change observation time value</label>
                    </div>
                    <div id="inerval-additional-case" {% if not my_config.interval_enabled %}style="display: none;"{% endif %} class="mt-2">
                        <div class="form-group">
                            <label for="IntervalInput">New observation time value :</label>
                            <input type="text" name="IntervalInput" id="IntervalInput" class="form-control" placeholder="∞" {% if my_config.interval_enabled %}value="{{ my_config.interval_value }}"{% endif %}>
                        </div>
                    </div>
                    <div class="form-check">
                        <input type="checkbox" id="smoothingCheckbox" name="smoothingCheckbox" class="form-check-input" {% if my_config.smoothing_enabled %}checked{% endif %}>
                        <label for="smoothingCheckbox" class="form-check-label">Change the smoothing value</label>
                    </div>
                    <div id="smoothing-additional-case" {% if not my_config.smoothing_enabled %}style="display: none;"{% endif %} class="mt-2">
                        <div class="form-group">
                            <label for="SmoothingInput">New value of smoothing:</label>
                            <input type="text" name="SmoothingInput" id="SmoothingInput" class="form-control" placeholder="1" {% if my_config.smoothing_enabled %}value="{{ my_config.smoothing_value }}"{% endif %}>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <h4>Debug option</h4>
                    <div class="form-check">
                        <input type="checkbox" id="verboseCheckbox" name="verboseCheckbox" class="form-check-input" {% if my_config.verbose %}checked{% endif %}>
                        <label for="verboseCheckbox" class="form-check-label">Plot more détails during inspection </label>
                    </div>
                </div>
            </form>
        </div>


        <div class="col-md-6">

            <div class="container mt-4">
                <div class="jumbotron">
                    <h3 class="display-6 text-center">Display configuration</h3>
                    <hr class="my-4">
                </div>
            </div>

            <form id="DisplayForm" action="/configuration/save_configuration" class="mt-4" method="post">
                <p id="submitErrorMessage" style="display: none;"> Une erreur est survenue lors de la sauvegarde </p>
                <div class="form-group">
                    <h4>Display option :</h4>
                    <div class="form-check">
                        <input type="checkbox" id="meanCheckbox" name="meanCheckbox" class="form-check-input" {% if graphics.mean %}checked{% endif %}>
                        <label for="meanCheckbox" class="form-check-label">Would you like to change the number of point plot per second ?</label>
                    </div>
                    <div id="mean-additional-case" {% if not graphics.mean %}style="display: none;"{% endif %} class="mt-2">
                        <div class="form-group">
                            <label for="meanInput">New value of mean :</label>
                            <input type="text" name="meanInput" id="meanInput" class="form-control" placeholder="0" {% if graphics.mean %}value="{{ my_config.mean_value }}"{% endif %}>
                        </div>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" id="slidingWindowCheckbox" name="slidingWindowCheckbox" class="form-check-input" {% if graphics.slidingWindow %}checked{% endif %}>
                        <label for="slidingWindowCheckbox" class="form-check-label">Would you like to set a sliding window for graphics ?</label>
                    </div>
                    <div id="slidingWindow-additional-case" {% if not graphics.slidingWindow %}style="display: none;"{% endif %} class="mt-2">
                        <div class="form-group">
                            <label for="slidingWindowInput"> Value of the sliding window :</label>
                            <input type="text" name="slidingWindowInput" id="slidingWindowInput" class="form-control" placeholder="0" {% if graphics.slidingWindowSize %}value="{{ my_config.mean_value }}"{% endif %}>
                        </div>
                    </div>

                </div>
            </form>

            <div class="container mt-4">
                <div class="jumbotron">
                    <h3 class="display-6 text-center">Saving configuration</h3>
                    <hr class="my-4">
                </div>
            </div>

            <form id="SavingForm" action="/configuration/save_configuration" class="mt-4" method="post">
                <p id="submitErrorMessage" style="display: none;"> Une erreur est survenue lors de la sauvegarde </p>
                <div class="form-group">
                    <h4>Saving option :</h4>
                    <div class="form-check">
                        <input type="checkbox" id="saveCheckbox" name="saveCheckbox" class="form-check-input" {% if saving.change_file_name %}checked{% endif %}>
                        <label for="saveCheckbox" class="form-check-label">Would you like to set a prefix for your files ? </label>
                    </div>
                    <div id="save-additional-case" {% if not saving.change_file_name %}style="display: none;"{% endif %} class="mt-2">
                        <div class="form-group">
                            <label for="saveInput">Choose your name here :</label>
                            <input type="text" name="saveInput" id="saveInput" class="form-control" placeholder="0" {% if saving.user_file_name %}value="{{ my_config.mean_value }}"{% endif %}>
                        </div>
                    </div>

                </div>
            </form>

        </div>

        <button id="submitFormsButton" class="btn btn-primary">Save this configuration</button>

    </div>
    <!-- Include the footer -->
    <div id="footer-placeholder"></div>

<script>

        document.getElementById('submitFormsButton').addEventListener('click', async function(e) {
            e.preventDefault(); // Prevent page reload

            let MonitoringForm = new FormData(document.getElementById('MonitoringForm'));
            let DisplayForm = new FormData(document.getElementById('DisplayForm'));
            let SavingForm = new FormData(document.getElementById('SavingForm'));

            let monitoring = {}
            let display = {}
            let saving = {}

            for (let [key, value] of MonitoringForm.entries()) {
                monitoring[key] = value;
            }

            for (let [key, value] of DisplayForm.entries()) {
                display[key] = value;
            }

            for (let [key, value] of SavingForm.entries()) {
                saving[key] = value;
            }

            try {
                await saveConfiguration('/configuration/save_monitoring_configuration', monitoring);
                await saveConfiguration('/configuration/save_display_configuration', display);
                await saveConfiguration('/configuration/save_saving_configuration', saving);

                console.log('All configurations saved successfully');
                // Redirect to the home page
                window.location.href = '/';
            } catch (error) {
                console.error(error);
            }

        });

        /**
         * Function to save the configuration to the file
         * @param url
         * @param data
         * @return {Promise<void>}
         */
        async function saveConfiguration(url, data) {
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data),
                });
            } catch (error) {
                console.error(error);
                throw error; // Propagate the error
            }
        }

        /**
         * Function to load the configuration from the file, and to display the correct value in the form
         */
        document.addEventListener('DOMContentLoaded', function () {
            let my_config = <%- my_config %>;
            let graphics = <%- graphics %>;
            let saving = <%- saving %>;

            if (my_config !== null) {
                LoadConfig(my_config);
            }

            if (graphics !== null) {
                LoadGraphics(graphics);
            }

            if (saving !== null) {
                LoadSaving(saving);
            }

            const pidCheckbox = document.getElementById('pidCheckbox');
            const additionalCase = document.getElementById('pid-additional-case');

            pidCheckbox.addEventListener('change', function () {
                additionalCase.style.display = pidCheckbox.checked ? 'block' : 'none';
            });


            const freqCheckbox = document.getElementById('freqCheckbox');
            const freqAdditionalCase = document.getElementById('freq-additional-case');

            freqCheckbox.addEventListener('change', function () {
                freqAdditionalCase.style.display = freqCheckbox.checked ? 'block' : 'none';
            });

            const intervalCheckbox = document.getElementById('intervalCheckbox');
            const intervalAdditionalCase = document.getElementById('inerval-additional-case');

            intervalCheckbox.addEventListener('change', function () {
                intervalAdditionalCase.style.display = intervalCheckbox.checked ? 'block' : 'none';
            });

            const smoothingCheckbox = document.getElementById('smoothingCheckbox');
            const smoothingAdditionalCase = document.getElementById('smoothing-additional-case');

            smoothingCheckbox.addEventListener('change', function () {
                smoothingAdditionalCase.style.display = smoothingCheckbox.checked ? 'block' : 'none';
            });

            const meanCheckbox = document.getElementById('meanCheckbox');
            const meanAdditionalCase = document.getElementById('mean-additional-case');

            meanCheckbox.addEventListener('change', function () {
                meanAdditionalCase.style.display = meanCheckbox.checked ? 'block' : 'none';
            });

            const slidingWindowCheckbox = document.getElementById('slidingWindowCheckbox');
            const slidingWindowAdditionalCase = document.getElementById('slidingWindow-additional-case');

            slidingWindowCheckbox.addEventListener('change', function () {
                slidingWindowAdditionalCase.style.display = slidingWindowCheckbox.checked ? 'block' : 'none';
            });

            const saveCheckbox = document.getElementById('saveCheckbox');
            const saveAdditionalCase = document.getElementById('save-additional-case');

            saveCheckbox.addEventListener('change', function () {
                saveAdditionalCase.style.display = saveCheckbox.checked ? 'block' : 'none';
            });


            document.getElementById('MonitoringForm').addEventListener('submit', function(event) {
                validateIntegerInput('pidInput');
                validateIntegerInput('FreqInput');
                validateIntegerInput('IntervalInput');
                validateIntegerInput('SmoothingInput');
                validateStringInput('saveInput')
                validateIntegerInput('meanInput')
                validateIntegerInput('slidingWindowInput')
            });

            toggleDisplay('pidCheckbox', 'pid-additional-case');
            toggleDisplay('freqCheckbox', 'freq-additional-case');
            toggleDisplay('intervalCheckbox', 'inerval-additional-case');
            toggleDisplay('smoothingCheckbox', 'smoothing-additional-case');
            toggleDisplay('meanCheckbox', 'mean-additional-case');
            toggleDisplay('slidingWindowCheckbox', 'slidingWindow-additional-case')
            toggleDisplay('saveCheckbox', 'save-additional-case')
        });

        /**
         * Function to toggle the display of an additional case based on the value of a checkbox
         * @param checkboxId
         * @param additionalCaseId
         */
        function toggleDisplay(checkboxId, additionalCaseId) {
            const checkbox = document.getElementById(checkboxId);
            const additionalCase = document.getElementById(additionalCaseId);

            additionalCase.style.display = checkbox.checked ? 'block' : 'none';
        }

        /**
         * Function to load the configuration from the file, and to display the correct value in the form
         * @param my_config
         */
        function LoadConfig(my_config) {

            // Monitoring configuration

            document.getElementById('pidCheckbox').checked = my_config.pidCheckbox ?? false;
            if (!my_config.pidCheckbox || my_config.pidInput === undefined) {
                document.getElementById('pidInput').setAttribute('placeholder', '0');
            } else {
                document.getElementById('pidInput').value = my_config.pidInput;
            }

            document.getElementById('cpuCheckbox').checked = my_config.cpuCheckbox;
            document.getElementById('gpuCheckbox').checked = my_config.gpuCheckbox;
            document.getElementById('memoryCheckbox').checked = my_config.memoryCheckbox;
            document.getElementById('powerCheckbox').checked = my_config.powerCheckbox;

            document.getElementById('freqCheckbox').checked = false;
            document.getElementById('FreqInput').value = my_config.FreqInput;

            document.getElementById('intervalCheckbox').checked = false;
            document.getElementById('IntervalInput').value = my_config.IntervalInput;

            document.getElementById('smoothingCheckbox').checked = false;
            document.getElementById('SmoothingInput').value = my_config.SmoothingInput;

            document.getElementById('verboseCheckbox').checked = my_config.verboseCheckbox;

        }

        /**
         * Function to load the graphics configuration from the file, and to display the correct value in the form
         * @param graphics
         */
        function LoadGraphics(graphics) {
            document.getElementById('meanCheckbox').checked = false;
            document.getElementById('meanInput').value = graphics.mean_display;

            document.getElementById('slidingWindowCheckbox').checked = false;
            document.getElementById('slidingWindowInput').value = graphics.sliding_window_size;
        }

        /**
         * Function to load the saving configuration from the file, and to display the correct value in the form
         * @param saving
         */
        function LoadSaving(saving) {
            document.getElementById('saveCheckbox').checked = saving.change_file_name;
            if (saving.change_file_name) {
                document.getElementById('saveInput').value = saving.user_file_name;
            }
            else {
                document.getElementById('saveInput').setAttribute('placeholder', saving.default_file_name);
            }
        }

        /**
         * Function to validate the input of the form
         * @param inputId
         */
        function validateIntegerInput(inputId) {
            const input = document.getElementById(inputId);
            if (input && input.value.trim() !== '' && !/^\d+$/.test(input.value)) {
                alert('Please enter an integer value for ' + inputId);
                event.preventDefault(); // Prevent form submission
            }
        }

        /**
         * Function to validate the input of the form
         * @param inputId
         */
        function validateStringInput(inputId) {
            const input = document.getElementById(inputId);
            if (input && input.value && input.value.trim() === '') {
                alert('Please enter a non-empty string for ' + inputId);
                event.preventDefault(); // Prevent form submission
            }
        }

</script>
</body>
</html>
